#pragma once

// From PnpHandleProcessWalkWorker
#define HandleTableEntryToObjectPtr(ObjectPtr) ((((__int64)(ObjectPtr) >> 16LL) & 0xFFFFFFFFFFFFFFF0ui64) + 0x30)

#define OBJECT_TYPE_Index_Offset 0x28
#define OBJECT_TYPE_PROCESS_INDEX 7
#define EPROCESS_ObjectTable_Offset 0x418  // +0x418 ObjectTable      : Ptr64 _HANDLE_TABLE

// No longer used because we opt for PsGetNextProcess over this broken garbage that doesn't lock shit properly.
// #define EPROCESS_ActiveProcessLinks_Offset 0x2E8;

typedef struct _KLDR_DATA_TABLE_ENTRY
{
    UCHAR Pad[0x68];
    int Flags;
} *PLDR_DATA_TABLE_ENTRY;

#define PLDR_DATA_TABLE_ENTRY_Flags_Signed 0x20

extern void* ObGetObjectType(void* Object);

#define DELETE                           (0x00010000L)
#define READ_CONTROL                     (0x00020000L)
#define WRITE_DAC                        (0x00040000L)
#define WRITE_OWNER                      (0x00080000L)
#define STANDARD_RIGHTS_REQUIRED         (0x000F0000L)
#define SYNCHRONIZE                      (0x00100000L)
#define PROCESS_TERMINATE                  (0x0001)  
#define PROCESS_CREATE_THREAD              (0x0002)  
#define PROCESS_SET_SESSIONID              (0x0004)  
#define PROCESS_VM_OPERATION               (0x0008)  
#define PROCESS_VM_READ                    (0x0010)  
#define PROCESS_VM_WRITE                   (0x0020)  
#define PROCESS_DUP_HANDLE                 (0x0040)  
#define PROCESS_CREATE_PROCESS             (0x0080)  
#define PROCESS_SET_QUOTA                  (0x0100)  
#define PROCESS_SET_INFORMATION            (0x0200)  
#define PROCESS_QUERY_INFORMATION          (0x0400)  
#define PROCESS_SUSPEND_RESUME             (0x0800)
#define PROCESS_QUERY_LIMITED_INFORMATION  (0x1000)
#define PROCESS_SET_LIMITED_INFORMATION    (0x2000)

#define THREAD_TERMINATE (0x0001)
#define THREAD_SUSPEND_RESUME (0x0002)

typedef void _HANDLE_TABLE;
typedef void _HANDLE_TABLE_ENTRY;
__int64 extern ExEnumHandleTable(_HANDLE_TABLE* HandleTable, unsigned __int8(__fastcall* EnumHandleProcedure)(_HANDLE_TABLE*, _HANDLE_TABLE_ENTRY*, void*, void*), void* EnumParameter, void** Handle);

typedef struct _HANDLE_TABLE_ENTRY
{
    void* ObjectPtr;
    ULONG GrantedAccess;
} *PHANDLE_TABLE_ENTRY;

LPCSTR NTSYSAPI NTAPI PsGetProcessImageFileName(PEPROCESS Process);

NTSTATUS
NTSYSAPI
NTAPI
ObReferenceObjectByName(
    IN PUNICODE_STRING ObjectPath,
    IN ULONG Attributes,
    IN PACCESS_STATE PassedAccessState,
    IN ACCESS_MASK DesiredAccess,
    IN POBJECT_TYPE ObjectType,
    IN KPROCESSOR_MODE AccessMode,
    IN OUT PVOID ParseContext,
    OUT PVOID* ObjectPtr);

extern POBJECT_TYPE NTSYSAPI IoDriverObjectType;


// symbols resolved by pdb parser (ntoskrnl_pdb.lib)

__int64 extern NTAPI ExUnlockHandleTableEntry(_HANDLE_TABLE* HandleTable, volatile PHANDLE_TABLE_ENTRY HandleTableEntry);

extern PEPROCESS NTAPI PsGetNextProcess(PEPROCESS Process);

extern PLDR_DATA_TABLE_ENTRY NTAPI MiLookupDataTableEntry(
    IN  PVOID AddressWithinSection,
    IN  ULONG ResourceHeld
);
